{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["useState","value","display","durationDD","currentDuration","setCurrentDuration","from","setFrom","to","setTo","selectHandler","ev","console","log","target","onChangeTo","type","e","placeholder","onChange","map","each","i","defaultValue","bind","this","onClick","myHeaders","Headers","append","urlencoded","URLSearchParams","fetch","method","headers","body","redirect","then","response","json","result","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","App","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.17aaf582.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport default function () {\n  const [durationDD, setDurationDD] = useState([\n    { value: 300, display: '5mins' },\n    { value: 600, display: '10mins' },\n    { value: 900, display: '15mins' },\n  ]);\n\n  const [currentDuration, setCurrentDuration] = useState(300);\n\n  const [from, setFrom] = useState('');\n  const [to, setTo] = useState('');\n\n  const selectHandler = (ev) => {\n    console.log(ev.target, ev.target.value);\n    setCurrentDuration(ev.target.value);\n  };\n\n  const onMakeCall = (e) => {\n    var myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    var urlencoded = new URLSearchParams();\n    urlencoded.append('to', to);\n    urlencoded.append('durationInSec', currentDuration);\n    urlencoded.append('from', from);\n\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow',\n    };\n\n    fetch('https://twin-node-server.herokuapp.com/connect', requestOptions)\n      .then((response) => response.json())\n      .then((result) => console.log(result))\n      .catch((error) => console.log('error', error));\n  };\n\n  const onChangeTo = (type, e) => {\n    if (type == 'from') {\n      setFrom(e.target.value);\n    } else {\n      setTo(e.target.value);\n    }\n  };\n\n  const renderDurationOptions = () => {\n    return (\n      <select placeholder=\"Select Duration\" onChange={selectHandler}>\n        {durationDD.map((each, i) => {\n          return (\n            <option key={i} defaultValue={currentDuration == each.value} value={each.value}>\n              {each.display}\n            </option>\n          );\n        })}\n      </select>\n    );\n  };\n\n  return (\n    <div>\n      <h1>Hello World</h1>\n      {renderDurationOptions()}\n      <input\n        type=\"text\"\n        onChange={onChangeTo.bind(this, 'from')}\n        placeholder=\"Calling from: \"\n      />\n      <input\n        type=\"text\"\n        onChange={onChangeTo.bind(this, 'to')}\n        placeholder=\"Calling to: \"\n      />\n      <button type=\"button\" onClick={onMakeCall}>\n        {'Call ' + to}\n      </button>\n    </div>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}