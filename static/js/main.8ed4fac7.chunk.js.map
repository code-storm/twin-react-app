{"version":3,"sources":["Timer.js","App.js","registerServiceWorker.js","index.js"],"names":["props","timer","useState","duration","seconds","setSeconds","timeLeftVar","secondsToTime","time","setTime","secs","divisor_for_minutes","divisor_for_seconds","h","Math","floor","m","s","ceil","countDown","useEffect","clearInterval","hideTimer","setInterval","value","display","durationDD","currentDuration","setCurrentDuration","from","setFrom","to","setTo","showTimer","setShowTimer","selectHandler","ev","target","onChangeTo","type","e","style","Timer","placeholder","onChange","map","each","i","defaultValue","bind","this","disabled","onClick","myHeaders","Headers","append","urlencoded","URLSearchParams","fetch","method","headers","body","redirect","then","response","json","result","console","log","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","App","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8ed4fac7.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport default function (props) {\n  const [seconds, setSeconds] = useState(props.duration);\n  let timeLeftVar = secondsToTime(seconds);\n  const [time, setTime] = useState(timeLeftVar);\n\nlet timer;\n  useEffect(() => {\n      if (seconds == 0) {clearInterval(timer);props.hideTimer();}\n      else timer = setInterval(countDown, 1000)\n      return () => {\n        clearInterval(timer);\n      }\n  },[seconds]);\n  \n  function secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let obj = {\n      h: hours,\n      m: minutes,\n      s: seconds,\n    };\n    return obj;\n  }\n\n\n  function countDown() {\n    // Remove one second, set state so a re-render happens.\n    let secs = seconds - 1;\n    setSeconds(secs);\n    setTime(secondsToTime(secs));\n  }\n\n  return (\n    <div>\n      Timer: m: {time.m} s: {time.s}\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport Timer from './Timer';\n\nexport default function () {\n  const [durationDD, setDurationDD] = useState([\n    { value: 300, display: '5mins' },\n    { value: 600, display: '10mins' },\n    { value: 900, display: '15mins' },\n  ]);\n\n  const [currentDuration, setCurrentDuration] = useState(300);\n\n  const [from, setFrom] = useState('');\n  const [to, setTo] = useState('');\n  const [showTimer, setShowTimer] = useState(false);\n\n  const selectHandler = (ev) => {\n    setCurrentDuration(ev.target.value);\n  };\n\n  const onMakeCall = (e) => {\n    var myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    var urlencoded = new URLSearchParams();\n    urlencoded.append('to', to);\n    urlencoded.append('durationInSec', currentDuration);\n    urlencoded.append('from', from);\n\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow',\n    };\n\n    fetch('https://twin-node-server.herokuapp.com/connect', requestOptions)\n      .then((response) => response.json())\n      .then((result) => {console.log(result); setShowTimer(true);})\n      .catch((error) => console.log('error', error));\n  };\n\n  const onChangeTo = (type, e) => {\n    if (type == 'from') {\n      setFrom(e.target.value);\n    } else {\n      setTo(e.target.value);\n    }\n  };\n\n  function hideTimer() {\n    setShowTimer(false);\n  }\n\n  const renderDurationOptions = () => {\n    return (\n      <select placeholder=\"Select Duration\" onChange={selectHandler}>\n        {durationDD.map((each, i) => {\n          return (\n            <option key={i} defaultValue={currentDuration == each.value} value={each.value}>\n              {each.display}\n            </option>\n          );\n        })}\n      </select>\n    );\n  };\n\n  return (\n    <div>\n      <h1>Hello World</h1>\n      <div style=\"padding: 10px;\">\n        {showTimer && <h3><Timer duration={currentDuration} hideTimer={hideTimer}/></h3>}\n      </div>\n      {renderDurationOptions()}\n      <input\n        type=\"text\"\n        onChange={onChangeTo.bind(this, 'from')}\n        placeholder=\"Calling from: \"\n      />\n      <input\n        type=\"text\"\n        onChange={onChangeTo.bind(this, 'to')}\n        placeholder=\"Calling to: \"\n      />\n      <button type=\"button\" disabled={showTimer} onClick={onMakeCall}>\n        {'Call ' + to}\n      </button>\n    </div>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}